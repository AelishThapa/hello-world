# Implementation of classic arcade game Pong
import simplegui
import random
# initialize globals - pos and vel encode vertical info for paddles
W = 800
H = 500       
RB = 20
WP = 8
HP = 80
a= 'score:0'
b= 'score:0'
# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global pb, vb
    pb=[W/2, H/2]
    vb=[0.0,0.0]
    if direction=='right':
        vb=[140.0/60.0,-200.0/60.0]
    elif direction=='left':
        vb=[-140.0/60.0,-200.0/60.0]
# these are vectors stored as lists
# define event handlers   
def new_game():
    global paddle1_pos1, paddle1_pos2,paddle2_pos1, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2,paddle2_pos2,pb,vb
    paddle1_pos1=[0,H/2-HP/2]
    paddle1_pos2=[0,H/2+HP/2]
    paddle1_vel=0
    paddle2_pos1=[W,H/2-HP/2]
    paddle2_pos2=[W,H/2+HP/2]
    paddle2_vel=0 
    pb=[W/2, H/2]
    vb=[0.0,0.0]
    score1=0
    score2=0
    spawn_ball('left')
# these are ints
def draw(canvas):
    global score1, score2, paddle1_pos1,paddle1_pos2, paddle2_pos1,paddle2_pos2
    global paddle1_vel,pb, vb ,acc,a,b,paddle2_vel
# draw mid line and gutters
    canvas.draw_line([W / 2, 0],[W / 2, H], 1, "White")
    canvas.draw_line([WP, 0],[WP, H],0.66, "White")
    canvas.draw_line([W-WP, 0],[W-WP, H],0.66, "White")
    canvas.draw_text('Player 1',[10,15],20,'Red')
    canvas.draw_text('Player 2',[W-80,15],20,'Red')
    canvas.draw_text(b,[10,35],20,'Red')
    canvas.draw_text(a,[W-80,35],20,'Red')    
    # update ball 
    pb[0]=pb[0]+vb[0]
    pb[1]=pb[1]+vb[1] 
    if pb[0]<=(RB+WP):
      if (paddle1_pos1[1]<=pb[1]<=paddle1_pos2[1]):
        score2=score2
        vb[0]=(-1.2)*vb[0]
      else: 
        score2+=1
        a= 'scrore:'+str(score2)
        spawn_ball('right')
    elif pb[0]>=(W-RB-WP):
      if (paddle2_pos1[1]<=pb[1]<=paddle2_pos2[1]):
       score1=score1
       vb[0]=(-1.2)*vb[0]
      else: 
       score1+=1
       b='Score: '+str(score1)
       spawn_ball('left')
    elif pb[1]<=(RB):
       vb[1]=-vb[1]
    elif pb[1]>=(H-RB):
       vb[1]=-vb[1]   
    # draw ball
    canvas.draw_circle(pb,RB,2,'Red','Green')
    # update paddle's vertical position, keep paddle on the screen    
    if H-HP>paddle1_pos1[1]>0:
     paddle1_pos1[1]+=paddle1_vel
     paddle1_pos2[1]+=paddle1_vel
    elif  0>paddle1_pos1[1]:
     paddle1_pos1[1]=1
     paddle1_pos2[1]=1+HP
    elif paddle1_pos1[1]>H-HP:
     paddle1_pos1[1]=H-HP-1
     paddle1_pos2[1]=H-1
    
    if H-HP>paddle2_pos1[1]>0:
     paddle2_pos1[1]+=paddle2_vel
     paddle2_pos2[1]+=paddle2_vel 
    elif  0>paddle2_pos1[1]:
     paddle2_pos1[1]=1
     paddle2_pos2[1]=1+HP
    elif paddle2_pos1[1]>H-HP:
     paddle2_pos1[1]=H-HP-1
     paddle2_pos2[1]=H-1
    
    # draw paddles
    canvas.draw_line(paddle1_pos1,paddle1_pos2,WP,'White')
    canvas.draw_line(paddle2_pos1,paddle2_pos2,WP,'White')
    # determine whether paddle and ball collide       
    # draw scores      
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key==simplegui.KEY_MAP['up']:
         paddle2_vel=-3.4
    elif key==simplegui.KEY_MAP['down']:
         paddle2_vel=3.4
    if key==simplegui.KEY_MAP['W']:
       paddle1_vel=-3.4
    elif key==simplegui.KEY_MAP['S']:
       paddle1_vel=3.4 
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key==simplegui.KEY_MAP['up']:
       paddle2_vel=0
    elif key==simplegui.KEY_MAP['down']:
       paddle2_vel=0
    if key==simplegui.KEY_MAP['W']:
       paddle1_vel=0
    elif key==simplegui.KEY_MAP['S']:
       paddle1_vel=0
# create frame
frame = simplegui.create_frame("Pong", W, H)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
new_game()
frame.add_button('RESTART',new_game,100)
# start frame
frame.start()
